RANDOM(3)               Linux Programmer's Manual              RANDOM(3)



NNAAMMEE
       random, srandom, initstate, setstate - random number generator

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddlliibb..hh>>

       lloonngg iinntt rraannddoomm((vvooiidd));;

       vvooiidd ssrraannddoomm((uunnssiiggnneedd iinntt _s_e_e_d));;

       cchhaarr **iinniittssttaattee((uunnssiiggnneedd iinntt _s_e_e_d,, cchhaarr **_s_t_a_t_e,, ssiizzee__tt _n));;
       cchhaarr **sseettssttaattee((cchhaarr **_s_t_a_t_e));;

   Feature    Test    Macro    Requirements    for   glibc   (see   ffeeaa‐‐
   ttuurree__tteesstt__mmaaccrrooss(7)):

       rraannddoomm(), ssrraannddoomm(), iinniittssttaattee(), sseettssttaattee():
           _SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE >= 500 ||
           _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED

DDEESSCCRRIIPPTTIIOONN
       The  rraannddoomm()  function uses a nonlinear additive feedback random
       number generator employing a default table of size 31 long  inte‐
       gers to return successive pseudo-random numbers in the range from
       0 to RRAANNDD__MMAAXX.  The period of this  random  number  generator  is
       very large, approximately _1_6 _* _(_(_2_^_3_1_) _- _1_).

       The  ssrraannddoomm()  function  sets its argument as the seed for a new
       sequence of pseudo-random integers to be  returned  by  rraannddoomm().
       These sequences are repeatable by calling ssrraannddoomm() with the same
       seed value.  If no seed value is provided, the rraannddoomm()  function
       is automatically seeded with a value of 1.

       The  iinniittssttaattee()  function  allows a state array _s_t_a_t_e to be ini‐
       tialized for use by rraannddoomm().  The size of the state array  _n  is
       used  by  iinniittssttaattee() to decide how sophisticated a random number
       generator it should use—the larger the state  array,  the  better
       the random numbers will be.  _s_e_e_d is the seed for the initializa‐
       tion, which specifies a starting  point  for  the  random  number
       sequence, and provides for restarting at the same point.

       The  sseettssttaattee() function changes the state array used by the rraann‐‐
       ddoomm() function.  The state array _s_t_a_t_e is used for random  number
       generation  until  the  next  call  to iinniittssttaattee() or sseettssttaattee().
       _s_t_a_t_e must first have been initialized using  iinniittssttaattee()  or  be
       the result of a previous call of sseettssttaattee().

RREETTUURRNN VVAALLUUEE
       The  rraannddoomm()  function  returns  a value between 0 and RRAANNDD__MMAAXX.
       The ssrraannddoomm() function returns no value.

       The iinniittssttaattee() function returns a pointer to the previous  state
       array.  On error, _e_r_r_n_o is set to indicate the cause.

       On  success,  sseettssttaattee()  returns a pointer to the previous state
       array.  On error, it returns NULL, with _e_r_r_n_o set to indicate the
       cause of the error.

EERRRROORRSS
       EEIINNVVAALL The _s_t_a_t_e argument given to sseettssttaattee() was NULL.

       EEIINNVVAALL A  state array of less than 8 bytes was specified to iinniitt‐‐
              ssttaattee().

CCOONNFFOORRMMIINNGG TTOO
       4.3BSD, POSIX.1-2001.

NNOOTTEESS
       Current "optimal" values for the size of the state array _n are 8,
       32, 64, 128, and 256 bytes; other amounts will be rounded down to
       the nearest known amount.  Using less than 8 bytes will cause  an
       error.

       This  function should not be used in cases where multiple threads
       use rraannddoomm() and the behavior should be reproducible.   Use  rraann‐‐
       ddoomm__rr(3) for that purpose.

       Random-number  generation  is a complex topic.  _N_u_m_e_r_i_c_a_l _R_e_c_i_p_e_s
       _i_n _C_: _T_h_e _A_r_t _o_f _S_c_i_e_n_t_i_f_i_c _C_o_m_p_u_t_i_n_g (William H. Press, Brian P.
       Flannery,  Saul  A.  Teukolsky,  William T. Vetterling; New York:
       Cambridge University Press, 2007, 3rd ed.)  provides an excellent
       discussion  of practical random-number generation issues in Chap‐
       ter 7 (Random Numbers).

       For a more theoretical discussion which also covers many  practi‐
       cal  issues in depth, see Chapter 3 (Random Numbers) in Donald E.
       Knuth's _T_h_e _A_r_t _o_f _C_o_m_p_u_t_e_r _P_r_o_g_r_a_m_m_i_n_g, volume 2  (Seminumerical
       Algorithms), 2nd ed.; Reading, Massachusetts: Addison-Wesley Pub‐
       lishing Company, 1981.

BBUUGGSS
       According to POSIX, iinniittssttaattee() should return NULL on error.   In
       the  glibc  implementation, _e_r_r_n_o is (as specified) set on error,
       but the function does not return NULL.

SSEEEE AALLSSOO
       ddrraanndd4488(3), rraanndd(3), rraannddoomm__rr(3), ssrraanndd(3)

CCOOLLOOPPHHOONN
       This page is part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.
       A  description  of  the  project, and information about reporting
       bugs, can be found at http://www.kernel.org/doc/man-pages/.



GNU                            2013-04-19                      RANDOM(3)
